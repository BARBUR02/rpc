// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "quizz.proto" (package "quiz", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { QuizService } from "./quizz";
import type { Question } from "./quizz";
import type { PlayQuizRequest } from "./quizz";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QuizListResponse } from "./quizz";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service quiz.QuizService
 */
export interface IQuizServiceClient {
    /**
     * @generated from protobuf rpc: GetAvailableQuizzes(google.protobuf.Empty) returns (quiz.QuizListResponse);
     */
    getAvailableQuizzes(input: Empty, options?: RpcOptions): UnaryCall<Empty, QuizListResponse>;
    /**
     * @generated from protobuf rpc: PlayQuiz(quiz.PlayQuizRequest) returns (stream quiz.Question);
     */
    playQuiz(input: PlayQuizRequest, options?: RpcOptions): ServerStreamingCall<PlayQuizRequest, Question>;
}
/**
 * @generated from protobuf service quiz.QuizService
 */
export class QuizServiceClient implements IQuizServiceClient, ServiceInfo {
    typeName = QuizService.typeName;
    methods = QuizService.methods;
    options = QuizService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAvailableQuizzes(google.protobuf.Empty) returns (quiz.QuizListResponse);
     */
    getAvailableQuizzes(input: Empty, options?: RpcOptions): UnaryCall<Empty, QuizListResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, QuizListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PlayQuiz(quiz.PlayQuizRequest) returns (stream quiz.Question);
     */
    playQuiz(input: PlayQuizRequest, options?: RpcOptions): ServerStreamingCall<PlayQuizRequest, Question> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayQuizRequest, Question>("serverStreaming", this._transport, method, opt, input);
    }
}

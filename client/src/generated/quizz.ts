// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "quizz.proto" (package "quiz", syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message quiz.Question
 */
export interface Question {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string expected = 2;
     */
    expected: string;
    /**
     * @generated from protobuf field: repeated string options = 3;
     */
    options: string[];
}
/**
 * @generated from protobuf message quiz.Quiz
 */
export interface Quiz {
    /**
     * @generated from protobuf field: quiz.QuizType type = 1;
     */
    type: QuizType;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: int32 no_questions = 3;
     */
    noQuestions: number;
}
/**
 * @generated from protobuf message quiz.QuizListResponse
 */
export interface QuizListResponse {
    /**
     * @generated from protobuf field: repeated quiz.Quiz quizzes = 1;
     */
    quizzes: Quiz[];
}
/**
 * @generated from protobuf message quiz.PlayQuizRequest
 */
export interface PlayQuizRequest {
    /**
     * @generated from protobuf field: quiz.QuizType quiz_type = 1;
     */
    quizType: QuizType;
}
/**
 * @generated from protobuf enum quiz.QuizType
 */
export enum QuizType {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: ANIMAL = 1;
     */
    ANIMAL = 1,
    /**
     * @generated from protobuf enum value: GEOGRAPHY = 2;
     */
    GEOGRAPHY = 2,
    /**
     * @generated from protobuf enum value: PHYSICS = 3;
     */
    PHYSICS = 3,
    /**
     * @generated from protobuf enum value: SPORT = 4;
     */
    SPORT = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Question$Type extends MessageType<Question> {
    constructor() {
        super("quiz.Question", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expected", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "options", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Question>): Question {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        message.expected = "";
        message.options = [];
        if (value !== undefined)
            reflectionMergePartial<Question>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Question): Question {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string expected */ 2:
                    message.expected = reader.string();
                    break;
                case /* repeated string options */ 3:
                    message.options.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Question, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string expected = 2; */
        if (message.expected !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.expected);
        /* repeated string options = 3; */
        for (let i = 0; i < message.options.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.options[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quiz.Question
 */
export const Question = new Question$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Quiz$Type extends MessageType<Quiz> {
    constructor() {
        super("quiz.Quiz", [
            { no: 1, name: "type", kind: "enum", T: () => ["quiz.QuizType", QuizType] },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "no_questions", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Quiz>): Quiz {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.label = "";
        message.noQuestions = 0;
        if (value !== undefined)
            reflectionMergePartial<Quiz>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Quiz): Quiz {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* quiz.QuizType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* int32 no_questions */ 3:
                    message.noQuestions = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Quiz, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* quiz.QuizType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* int32 no_questions = 3; */
        if (message.noQuestions !== 0)
            writer.tag(3, WireType.Varint).int32(message.noQuestions);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quiz.Quiz
 */
export const Quiz = new Quiz$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuizListResponse$Type extends MessageType<QuizListResponse> {
    constructor() {
        super("quiz.QuizListResponse", [
            { no: 1, name: "quizzes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Quiz }
        ]);
    }
    create(value?: PartialMessage<QuizListResponse>): QuizListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quizzes = [];
        if (value !== undefined)
            reflectionMergePartial<QuizListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuizListResponse): QuizListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated quiz.Quiz quizzes */ 1:
                    message.quizzes.push(Quiz.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuizListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated quiz.Quiz quizzes = 1; */
        for (let i = 0; i < message.quizzes.length; i++)
            Quiz.internalBinaryWrite(message.quizzes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quiz.QuizListResponse
 */
export const QuizListResponse = new QuizListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayQuizRequest$Type extends MessageType<PlayQuizRequest> {
    constructor() {
        super("quiz.PlayQuizRequest", [
            { no: 1, name: "quiz_type", kind: "enum", T: () => ["quiz.QuizType", QuizType] }
        ]);
    }
    create(value?: PartialMessage<PlayQuizRequest>): PlayQuizRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.quizType = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayQuizRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayQuizRequest): PlayQuizRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* quiz.QuizType quiz_type */ 1:
                    message.quizType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayQuizRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* quiz.QuizType quiz_type = 1; */
        if (message.quizType !== 0)
            writer.tag(1, WireType.Varint).int32(message.quizType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message quiz.PlayQuizRequest
 */
export const PlayQuizRequest = new PlayQuizRequest$Type();
/**
 * @generated ServiceType for protobuf service quiz.QuizService
 */
export const QuizService = new ServiceType("quiz.QuizService", [
    { name: "GetAvailableQuizzes", options: {}, I: Empty, O: QuizListResponse },
    { name: "PlayQuiz", serverStreaming: true, options: {}, I: PlayQuizRequest, O: Question }
]);
